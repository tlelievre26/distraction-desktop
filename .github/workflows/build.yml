name: Build/release

on:
  push:
    branches:
      - main
      - build-and-release

jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Install Python to satisfy node-gyp dependencies
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Recommended version range for node-gyp

      - name: Increment version number
        run: |
          yarn version --patch
          NEW_VERSION=$(node -p "require('./package.json').version")
          git add package.json yarn.lock
          git commit -m "Release version $NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
          git push origin main --follow-tags


      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}
          args: "--dir"

      - name: Prepare build artifacts
        run: |
          mkdir -p release
          cp -R build/*.exe release/
          zip -r release/build.zip build/

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Automated release for version ${{ github.ref_name }}.
            - Installer included.
            - Zipped build folder available for download.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/build.zip
          asset_name: build.zip
          asset_content_type: application/zip

      - name: Upload installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/*.exe
          asset_name: app-installer.exe
          asset_content_type: application/octet-stream
  