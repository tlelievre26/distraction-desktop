/* eslint-disable no-console */
//Just including this file as an example so that git tracks the directory structure

const calcMetrics = (data, sessionId) => {
  console.log("Calculating metrics for session ", sessionId);
  //Filling this with default values just to create a schema of our metrics
  const sampleMetrics = {
    //In reality, all of these except duration would be generated by a "process session ID" call of some kind
    numTasks: 10, // Number of tasks completed
    tabSwitchRate: 2, // # of times tabs were switched divided by number of minutes in session
    timeOnDistr: 1000, // Secs of time spent on apps labeled as distractions, probably won't keep this
    productivityEstimate: 8, // This isn't a real metric I just couldn't think of anything else
    mostUsedApps: [ //List of the apps with the most time spent across the session
      // App Name, total usage duration in minutes, number of times you switched to the app
      { appName: "App1", duration: 60 * 50, countSwitchedTo: 50 },
      { appName: "App2.com", duration: 60 * 40, countSwitchedTo: 30 },
      { appName: "App3", duration: 60 * 30, countSwitchedTo: 40 },
      { appName: "App4.edu", duration: 60 * 25, countSwitchedTo: 20 },
      { appName: "App5", duration: 60 * 15, countSwitchedTo: 7 }
    ]
        
  };
  return sampleMetrics;

};

const chunkData = (sessionData) => {

  const time = sessionData.map((element) => {
    return new Date(element._time);
  });

  const getSeconds = (utc) => {
    return utc.getUTCSeconds() + utc.getUTCMinutes() * 60 + utc.getUTCHours() * 3600;
  };

  const timeConversion = time.map((element, index, arr) => {
    if (index + 1 < arr.length) {
      const endTime = arr[index+1];
      return getSeconds(endTime) - getSeconds(element);
    }
    return 0;
  });

  const data = { chunks: [] };

  timeConversion.reduce((acc, time, idx) => {
    if (acc.currentSum + time > 900) {
      if (acc.currentSum === 900 || idx === timeConversion.length - 1) { // Push the chunk if it sums to 900 or if youve reached the end of the session 
        data.chunks.push(acc.currentChunk); 
      }
      else {
        acc.currentChunk.push({name: sessionData[idx]._value, timeSpent: 900 - acc.currentSum});
        data.chunks.push(acc.currentChunk);
        time = time - (900 - acc.currentSum);
      }
      // Reset for the next chunk
      acc.currentChunk = [{name: sessionData[idx]._value, timeSpent: time}];
      acc.currentSum = time; // Reset currentSum      
    } 
    else {
      // Add to the current chunk
      acc.currentChunk.push({name: sessionData[idx]._value, timeSpent: time});
      acc.currentSum += time;
    }
    return acc;
  }, { currentChunk: [{}], currentSum: 0 });

  data.chunks.shift();
  return data;
};

module.exports = {calcMetrics, chunkData};